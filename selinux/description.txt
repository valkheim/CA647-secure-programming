####################################################################################
                                      SELinux
####################################################################################

From Linux 2.6, SELinux is pluggable to kernel as a mandatory access control system.


                                              operations
                                  +--------+      |       +----------+
            +----------+          |        |<-----+------>| HARDWARE |
            | SOFTWARE |----+---->| KERNEL |              +----------+
            +----------+    |     |        |<---.
                         syscall  +--------+    |       +---------+
                                                '-+---->| SELINUX |
                                                  |     +---------+
                                                  |
                                               policies


Default SELinux mode on lab vm can be fetched using getenforce :

$ getenforce
Enforcing
# cat /etc/selinux/config
SELINUX=enforcing
SELINUXTYPE=targeted

##
### Security contexts
######################                                                           ###

ls -Z option prints security context. A security context (or label) is the mechanism
used by SELinux to classify elements to be monitored (SELinux is a labelling system).
The label consists in four words separated by ':'. Theses words are used to make
access control decisions (MAC). Theses SELinux rules are checked after most common
discretionary access control (DAC) rules.

--
--- Files contexts
-------------------                                                              ---

Let's discover the default context applied on our vulnerable server :

$ ls -Z ca647_server
unconfined_u:object_r:user_home_t:s0 ca647_server

SELinux context words :

0x00 - SELinux User (unconfined_u)
       unconfined_u is the default user (think of users as a way of grouping roles)
0x01 - Role (object_r)
       Role field on a file (such as our server) is always object_r. Think of roles
       as a way of grouping security types. (See Roles Based Access Control, RBAC)
0x02 - Type (user_home_t)
       Type component. Used for SELinux Type EnforcmenE
0x03 - Level (s0)
       Multi-level security (MLS).

--
--- Users contexts
-------------------                                                              ---

There is also a security context for users. Let's try it

$ id -Z 
unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

0x00 - SELinux User (unconfined_u)
0x01 - Role (unconfined_r)
0x02 - Type (unconfined_t)
0x03 - Level (s0-s0)
       This is the same as s0
0x04 - Categories (c0.c1023)
       Multi-Category Security (MCS). The categories user has acces (from c0 to c1023)

--
--- Processes contexts
-----------------------                                                          ---

Security contexts also applies on processes :

$ ./ca647_server &
[1] 2314
$ ps Z | grep ca647_server
unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 2314 pts/2 S   0:00 ./ca647_server

--
--- Other contexts
-------------------                                                              ---

 Network
---------

$ ss -lt4Z
State       Recv-Q Send-Q            Local Address:Port                             Peer Address:Port                
LISTEN      0      5                     127.0.0.1:vcom-tunnel                                 *:*                     users:(("ca647_server",pid=2516,proc_ctx=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023,fd=3))

 Open files 
------------

$ lsof | grep ca647_server
ca647_ser 2516         lain  txt       REG      253,0     12460     409548 /home/lain/CA647-secure-programming/server/ca647_server

##
### SELinux Policy module
##########################                                                       ###

Policies are written in a .te file (type enforcement file). Interface file (.if)
that defines functions available to other policies, File Context file (.fc) that
desribes the path labels and a package spec file (.spec) are optionnals.

--
--- Policy syntax
------------------                                                               ---

                          allow Source Target:Class Permission;

This means "grant Permission to a process of domain (type) Source on objects of type
Target and class Class".

                      allow unconfined_t ca647_server_t:file read ;

This means "allow processes in domain (type) unconfined_t read permission on files
of type ca647_server_t"

We can used auditallow that will log instead of simple allow.

--
--- With audit2allow
----------------------                                                           ---

There is a way to write policy module easily by turning selinux denial log messages
into rules using audit2allow command.

Here is how to do it :

0x00 - Define a type for the ca647_server executable
0x01 - Define a type for the ca647_server domain in which the server is running
       and for the path of the files
0x02 - The process runs in its own domain : every possible access to existing
       objects (objects are files, directories, file descriptors, pipes, sockets,
       network interfaces, ...) are denied by default (see semanage boolean -l).
0x03 - Turn SELinux permissive mode ON
0x04 - Run the ca647_server : bad accesses are logged
0x00 - Use audit2allow -M to create rules (.te + compiled .pp)

--
--- Writing a module (ca647_server.te)
---------------------------------------                                          ---

Get context from path :

$ matchpathcon /home/lain/CA647-secure-programming/server

Generate an initial SELinux policy module template :

$ sepolicy generate --init /home/lain/CA647-secure-programming/server/ca647_server
Created the following files:
/home/lain/CA647-secure-programming/selinux/ca647_server.te # Type Enforcement file
/home/lain/CA647-secure-programming/selinux/ca647_server.if # Interface file
/home/lain/CA647-secure-programming/selinux/ca647_server.fc # File Contexts file
/home/lain/CA647-secure-programming/selinux/ca647_server_selinux.spec # Spec file
/home/lain/CA647-secure-programming/selinux/ca647_server.sh # Setup Script

Allow rpm builds :

# dnf install fedora-packager

Setup module :

# ./ca647_server.sh 
Building and Loading Policy
+ make -f /usr/share/selinux/devel/Makefile ca647_server.pp
make: 'ca647_server.pp' is up to date.
+ /usr/sbin/semodule -i ca647_server.pp
+ sepolicy manpage -p . -d ca647_server_t
./ca647_server_selinux.8
+ /sbin/restorecon -F -R -v /home/lain/CA647-secure-programming/server/ca647_server
++ pwd
+ pwd=/home/lain/CA647-secure-programming/selinux
+ rpmbuild --define '_sourcedir /home/lain/CA647-secure-programming/selinux' --define '_specdir /home/lain/CA647-secure-programming/selinux' --define '_builddir /home/lain/CA647-secure-programming/selinux' --define '_srcrpmdir /home/lain/CA647-secure-programming/selinux' --define '_rpmdir /home/lain/CA647-secure-programming/selinux' --define '_buildrootdir /home/lain/CA647-secure-programming/selinux/.build' -ba ca647_server_selinux.spec
Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.jmeF7k
+ umask 022
+ cd /home/lain/CA647-secure-programming/selinux
+ '[' /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386 '!=' / ']'
+ rm -rf /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386
++ dirname /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386
+ mkdir -p /home/lain/CA647-secure-programming/selinux/.build
+ mkdir /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386
+ install -d /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386/usr/share/selinux/packages
+ install -m 644 /home/lain/CA647-secure-programming/selinux/ca647_server.pp /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386/usr/share/selinux/packages
+ install -d /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386/usr/share/selinux/devel/include/contrib
+ install -m 644 /home/lain/CA647-secure-programming/selinux/ca647_server.if /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386/usr/share/selinux/devel/include/contrib/
+ install -d /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386/usr/share/man/man8/
+ install -m 644 /home/lain/CA647-secure-programming/selinux/ca647_server_selinux.8 /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386/usr/share/man/man8/ca647_server_selinux.8
+ install -d /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386/etc/selinux/targeted/contexts/users/
+ /usr/lib/rpm/check-buildroot
+ /usr/lib/rpm/brp-compress
+ /usr/lib/rpm/brp-strip /usr/bin/strip
+ /usr/lib/rpm/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump
+ /usr/lib/rpm/brp-strip-static-archive /usr/bin/strip
+ /usr/lib/rpm/brp-python-bytecompile /usr/bin/python 1
+ /usr/lib/rpm/brp-python-hardlink
+ /usr/lib/rpm/redhat/brp-java-repack-jars
Processing files: ca647_server_selinux-1.0-1.fc24.noarch
Provides: ca647_server_selinux = 1.0-1.fc24
Requires(interp): /bin/sh /bin/sh
Requires(rpmlib): rpmlib(CompressedFileNames) <= 3.0.4-1 rpmlib(FileDigests) <= 4.6.0-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1
Requires(post): /bin/sh policycoreutils selinux-policy-base >= 3.13.1-191
Requires(postun): /bin/sh policycoreutils
Checking for unpackaged file(s): /usr/lib/rpm/check-files /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386
Wrote: /home/lain/CA647-secure-programming/selinux/ca647_server_selinux-1.0-1.fc24.src.rpm
Wrote: /home/lain/CA647-secure-programming/selinux/noarch/ca647_server_selinux-1.0-1.fc24.noarch.rpm
Executing(%clean): /bin/sh -e /var/tmp/rpm-tmp.frIT43
+ umask 022
+ cd /home/lain/CA647-secure-programming/selinux
+ /usr/bin/rm -rf /home/lain/CA647-secure-programming/selinux/.build/ca647_server_selinux-1.0-1.fc24.i386
+ exit 0

Checking server security context type :

$ ls -Z ca647_server
system_u:object_r:ca647_server_exec_t:s0 ca647_server

Checking who if unconfined_t is allowed to execute ca647_server_exec_t

$ sesearch -s unconfined_t -t ca647_server_exec_t -c file -p execute -Ad
Found 1 semantic av rules:
   allow unconfined_t ca647_server_exec_t : file { execute entrypoint } ; 

ca647_server_exec_t is an entrypoint for :

$ sesearch -t ca647_server_exec_t -c file -p entrypoint -Ad
Found 2 semantic av rules:
   allow ca647_server_t ca647_server_exec_t : file { ioctl read getattr lock execute execute_no_trans entrypoint open } ; 
   allow unconfined_t ca647_server_exec_t : file { execute entrypoint } ;

Process domain transition permissions

$ sesearch -t ca647_server_t -c process -p transition -Ad
Found 1 semantic av rules:
   allow unconfined_t ca647_server_t : process transition ;


After building my selinux module this way, I am not to be able to start it. This is
something I wanted because there was no explicit exec permission on the type
enforcment rule but there was no warning in the audit.log file so I was not able to
write the rule with audit2allow as I planned to do. I don't have time to investigate
more, unfortunately.
I wish I had more time to experiment with mem exec, stack exec, socket binding rules
and boolean and much more.

##
### References
###############                                                                  ###

 0x00 - https://wiki.gentoo.org/wiki/SELinux (as usual, it's a great documentation)
 0x01 - http://www.billauer.co.il/selinux-policy-module-howto.html
 0x02 - https://selinuxproject.org/page/Building_a_Basic_Policy
